{"version":3,"file":"ExpoStatusBar.android.js","sourceRoot":"","sources":["../src/ExpoStatusBar.android.tsx"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAkB,MAAM,cAAc,CAAC;AAEzD,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAE9C,MAAM,CAAC,OAAO,UAAU,aAAa,CAAC,KAAqB;IACzD,MAAM,EACJ,WAAW,EAAE,eAAe,EAC5B,eAAe,EAAE,mBAAmB,EACpC,QAAQ,EAAE,YAAY,EACtB,GAAG,UAAU,EACd,GAAG,KAAK,CAAC;IAEV,gFAAgF;IAChF,gFAAgF;IAChF,MAAM,mBAAmB,GAAG,SAAS,CAAC,QAAQ,EAAE,gBAAgB,EAAE,WAAW,IAAI,IAAI,CAAC;IACtF,MAAM,WAAW,GAAG,eAAe,IAAI,mBAAmB,CAAC;IAE3D,2FAA2F;IAC3F,0CAA0C;IAC1C,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACrC,IAAI,QAAQ,GAAG,YAAY,CAAC;IAC5B,IAAI,CAAC,YAAY,KAAK,SAAS,IAAI,CAAC,YAAY,CAAC,IAAI,WAAW,EAAE;QAChE,QAAQ,GAAG,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,eAAe,CAAC;KACvE;IAED,IAAI,eAAe,GAAG,mBAAmB,CAAC;IAC1C,IAAI,WAAW,EAAE;QACf,IAAI,mBAAmB,KAAK,SAAS,EAAE;YACrC,wCAAwC;YACxC,eAAe,GAAG,aAAa,CAAC;SACjC;KACF;IAED,OAAO,CACL,oBAAC,SAAS,kBACR,WAAW,EAAE,WAAW,EACxB,eAAe,EAAE,eAAe,EAChC,QAAQ,EAAE,QAAQ,IACd,UAAU,EACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["import Constants from 'expo-constants';\nimport React from 'react';\nimport { StatusBar, StatusBarProps } from 'react-native';\n\nimport useColorScheme from './useColorScheme';\n\nexport default function ExpoStatusBar(props: StatusBarProps) {\n  const {\n    translucent: userTranslucent,\n    backgroundColor: userBackgroundColor,\n    barStyle: userBarStyle,\n    ...otherProps\n  } = props;\n\n  // If the manifest is available and androidStatusBar is set in it, then base the\n  // default value off of that. If it's not provided, we assume it is translucent.\n  const defaultTranslucency = Constants.manifest?.androidStatusBar?.translucent ?? true;\n  const translucent = userTranslucent ?? defaultTranslucency;\n\n  // Pick appropriate 'default' depending on current theme, so if we are locked to light mode\n  // we don't end up with a light status bar\n  const colorScheme = useColorScheme();\n  let barStyle = userBarStyle;\n  if ((userBarStyle === 'default' || !userBarStyle) && translucent) {\n    barStyle = colorScheme === 'light' ? 'dark-content' : 'light-content';\n  }\n\n  let backgroundColor = userBackgroundColor;\n  if (translucent) {\n    if (userBackgroundColor === undefined) {\n      // TODO: use manifest property for this?\n      backgroundColor = 'transparent';\n    }\n  }\n\n  return (\n    <StatusBar\n      translucent={translucent}\n      backgroundColor={backgroundColor}\n      barStyle={barStyle}\n      {...otherProps}\n    />\n  );\n}\n"]}